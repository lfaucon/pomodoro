{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["INTERVAL","App","useState","display","setDisplay","step","setStep","stop","clearInterval","play","target","callback","start","Date","setInterval","update","time","minutes","Math","floor","seconds","centi","d","x","document","getElementById","className","id","src","type","onClick","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d558ab64.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nvar INTERVAL;\nconst MINUTE = 60000;\n\nconst App = () => {\n  const [display, setDisplay] = useState('Pomodoro');\n  const [step, setStep] = useState('stopped');\n\n  const stop = () => {\n    setStep('stopped');\n    if (INTERVAL) clearInterval(INTERVAL);\n    setDisplay('Focus Time!');\n  };\n\n  const play = (target, callback) => {\n    if (INTERVAL) clearInterval(INTERVAL);\n    const start = new Date();\n    INTERVAL = setInterval(() => update(start, target, callback), 42);\n  };\n\n  const work = () => {\n    setStep('working');\n    play(25, () => {\n      setStep('stopped');\n      setDisplay('Work Session Completed!');\n    });\n  };\n\n  const takeBreak = () => {\n    setStep('relaxed');\n    play(5, () => {\n      setStep('stopped');\n      setDisplay('Back to work');\n    });\n  };\n\n  const update = (start, target, callback) => {\n    const time = target * MINUTE - (new Date() - start);\n    const minutes = Math.floor(time / 60000);\n    const seconds = Math.floor(time / 1000) % 60;\n    const centi = Math.floor(time / 10) % 100;\n    const d = (x) => (x < 10 ? '0' + x : '' + x);\n    setDisplay(d(minutes) + ':' + d(seconds) + ':' + d(centi));\n    if (time < 0) {\n      stop();\n      document.getElementById('audio').play();\n      callback();\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <audio id=\"audio\">\n        <source src=\"powerUp6.mp3\" type=\"audio/mpeg\" />\n      </audio>\n      <div className=\"timer\">{display}</div>\n      {step === 'stopped' && (\n        <div className=\"button\" onClick={work}>\n          WORK\n        </div>\n      )}\n      {step === 'stopped' && (\n        <div className=\"button\" onClick={takeBreak}>\n          TAKE A BREAK\n        </div>\n      )}\n      {(step === 'relaxed' || step === 'working') && (\n        <div className=\"button\" onClick={stop}>\n          STOP\n        </div>\n      )}\n      {step === 'working' && <div className=\"info\">FOCUS!</div>}\n      {step === 'relaxed' && <div className=\"info\">Enjoy Life :)</div>}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}